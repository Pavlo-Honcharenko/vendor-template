@use "sass:math";

// Importing mixins ==============================================================================================================
@import "base/mixins";
@import url("https://fonts.googleapis.com/css?family=Josefin+Sans:300,regular,500,600&display=swap");
@import url("https://fonts.googleapis.com/css?family=Playfair+Display:italic&display=swap");

// Importing fonts ===========================================================================================================

// Uncomment if there are local font files
// @import "fonts/fonts";

// Importing icon fonts
// Uncomment if there is an icon font file
// @import "fonts/icons";

// ================================================================================================================================
// Template settings ===========================================================================================================
// ================================================================================================================================

// Default font
$fontFamily: "Josefin Sans";
$fontSize: toRem(16); // where 16(px) is the default font size from the layout

// Primary colors
$mainColor: #000; // Default font color

// Color palette
// @import "base/colors-palette";

// Responsive grid settings ====================================================================================================

// Minimum page width
$minWidth: 320;
// Canvas (layout) width
$maxWidth: 2560;
// Constraining container width (0 = no constraint)
$maxWidthContainer: 1210;
// General container padding
// (30 = 15px left and right, 0 = no padding)
$containerPadding: 30;

// First breakpoint width
$containerWidth: $maxWidthContainer + $containerPadding;

// Breakpoints
$pc: toEm($containerWidth); // PCs, laptops, some tablets in horizontal position
$tablet: toEm(991.98); // Tablets, some phones in horizontal position
$mobile: toEm(767.98); // Phones L
$mobileSmall: toEm(479.98); // Phones S

// Adaptive type:
// 1 = responsive (container has no breakpoints),
// 2 = by breakpoints (container changes width by breakpoints)
$responsiveType: 1;

// =================================================================================================================
// =================================================================================================================

// Resetting styles
@import "base/null";

// Importing Tailwind components
// @import "libs/tailwind";

// Styles for BODY tag =================================================================================================

body {
	// scrollbar-gutter: stable;
	// Scroll locked
	.lock & {
		overflow: hidden;
		touch-action: none;
		overscroll-behavior: none;
	}
	// Site loaded
	.loaded & {
	}
}
// Wrapper styles ===============================================================================================
.wrapper {
	min-height: 100%;
	display: flex;
	flex-direction: column;
	overflow: hidden;
	@supports (overflow: clip) {
		overflow: clip;
	}
	// Push footer down
	> #vendor-portfolio {
		flex: 1 1 auto;
	}
	// Fix for sliders
	> * {
		min-width: 0;
	}
}
// Constraining container =============================================================================================

// (i) Styles will be applied to
// all classes containing *__container
// For example, header__container, main__container, etc.

@if ($responsiveType==1) {
	// Responsive
	[class*="__container"] {
		@if ($maxWidthContainer>0) {
			max-width: toRem($containerWidth);
			margin: 0 auto;
		}
		@if ($containerPadding>0) {
			@if ($maxWidthContainer>0) {
				padding: 0 toRem(math.div($containerPadding, 2));
			} @else {
				@include adaptiveValue("padding-left", math.div($containerPadding, 2), 15);
				@include adaptiveValue("padding-right", math.div($containerPadding, 2), 15);
			}
		}
	}
} @else {
	// By breakpoints
	[class*="__container"] {
		margin: 0 auto;
		@if ($maxWidthContainer>0) {
			max-width: toRem($containerWidth);
		} @else {
			@if ($containerPadding>0) {
				padding: 0 toRem(math.div($containerPadding, 2));
			}
		}
		@media (max-width: $pc) {
			max-width: toRem(970);
		}
		@media (max-width: $tablet) {
			max-width: toRem(750);
		}
		@media (max-width: $mobile) {
			max-width: none;
			@if ($containerPadding>0 and $maxWidthContainer>0) {
				padding: 0 toRem(math.div($containerPadding, 2));
			}
		}
	}
}

[class*="__container"] {
	width: 100vw;

	@media (min-width:$mobile){
		width: calc(100vw - 330px);
		
	}
	
}

// Importing base styles, templates, and utility classes
// For enabling/disabling specific styles see base.scss
@import "base";

// Importing styles for common project elements
@import "common";

// Importing styles for individual blocks
@import "header";
@import "footer";

// Importing styles for individual pages
@import "home";
